{"version":3,"sources":["components/MovieListComp.js","App.js","serviceWorker.js","index.js"],"names":["MovieListComp","props","state","data","loaded","placeholder","fetch","then","response","status","setState","json","class","colspan","this","map","movie","title","year","genre","href","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0OAgEeA,E,kDA7Db,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,KAAM,GACNC,QAAQ,EACRC,YAAa,WALE,E,gEASE,IAAD,OAClBC,MAAM,cACHC,MAAK,SAAAC,GACJ,OAAIA,EAASC,OAAS,IACb,EAAKC,UAAS,WACnB,MAAO,CAAEL,YAAa,4BAGnBG,EAASG,UAEjBJ,MAAK,SAAAJ,GACJ,EAAKO,UAAS,WACZ,MAAO,CACLP,OACAC,QAAQ,W,+BAOhB,OACI,6BACA,sCACA,2BAAOQ,MAAM,uBACb,+BACI,4BACA,qCACA,oCACA,qCACA,wBAAIC,QAAQ,KAAZ,YAGJ,+BACKC,KAAKZ,MAAMC,KAAKY,KAAI,SAAAC,GACjB,OACI,4BACA,4BAAKA,EAAMC,OACX,4BAAKD,EAAME,MACX,4BAAKF,EAAMG,OACX,4BAAI,uBAAGP,MAAM,sBAAsBQ,KAAK,IAApC,SACJ,4BAAI,uBAAGR,MAAM,wBAAwBQ,KAAK,IAAtC,sB,GAnDIC,aCWbC,MARf,WACE,OACE,yBAAKC,UAAU,OACX,kBAAC,EAAD,QCIYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.4da5bfa8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass MovieListComp extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: [],\r\n      loaded: false,\r\n      placeholder: \"Loading\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"movies/api\")\r\n      .then(response => {\r\n        if (response.status > 400) {\r\n          return this.setState(() => {\r\n            return { placeholder: \"Something went wrong!\" };\r\n          });\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(data => {\r\n        this.setState(() => {\r\n          return {\r\n            data,\r\n            loaded: true\r\n          };\r\n        });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div>\r\n        <h3>Movies</h3>\r\n        <table class=\"table table-striped\">\r\n        <thead>\r\n            <tr>\r\n            <th>Title</th>\r\n            <th>Year</th>\r\n            <th>Genre</th>\r\n            <th colspan=\"2\">Action</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {this.state.data.map(movie => {\r\n                return (\r\n                    <tr>\r\n                    <td>{movie.title}</td>\r\n                    <td>{movie.year}</td>\r\n                    <td>{movie.genre}</td>\r\n                    <td><a class=\"btn btn-sm btn-info\" href=\"\">Edit</a></td>\r\n                    <td><a class=\"btn btn-sm btn-danger\" href=\"\">Delete</a></td>\r\n                  </tr>\r\n            );\r\n            })}\r\n        </tbody>\r\n    </table>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieListComp;","import React from 'react';\nimport './App.css';\n\nimport MovieListComp from './components/MovieListComp';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <MovieListComp />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}